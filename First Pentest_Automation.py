# coding=UTF-8
import requests
import os
import xlrd

class STR:
    def File_exists(self):
        if os.path.isfile("test.xlsx"):
            os.remove("test.xlsx")

    def Headers(self):
        self.head = {}
        self.headers = open('headers.txt','r+')
        for i in self.headers:
            self.key_param = i[0:i.index(': ')]
            self.key_value = i[i.index(': ')+2:].strip('\n')
            self.head[self.key_param] = self.key_value
        return self.head

    def full_test(self):
        self.Headers()
        self.cors()
        self.xss()
        self.vulnerable_components()
        # self.error_leakage()
        self.File_exists()
        self.csv_injection()

    def cors(self):
        self.url = "https://test.com/app/employees"
        self.head = self.Headers()
        self.head['Origin'] = 'https://123test.com'
        self.response = requests.request("GET", self.url, data=None, headers= self.head)
        if self.response.headers['Access-Control-Allow-Origin'] == 'https://123test.com':
            print "Vulnerable to Cross-Origin attacks"
        else:
            print "Not Vulnerable to Cross-Origin attacks"
        del self.head['Origin']

    def xss(self):
        self.url = "https://test.com/app/employees"
        self.strips = self.head['Cookie']
        self.payload = 'gauthid=</script><script>alert(123)</script>'
        self.final = self.strips.replace('gauthid=1', self.payload)
        self.head['Cookie'] = self.final
        self.response = requests.request("GET", self.url, data=None, headers=self.head)
        if self.payload[8:] in self.response.text:
            print "Vulnerable to Cross-Site Scripting"
        else:
            print "Not Vulnerable to Cross-Site Scripting"
        self.head['Cookie'] = self.strips

    def vulnerable_components(self):
        self.url = "https://test.com/app/hello?localguest=true"
        self.response = requests.request("GET", self.url, data=None, headers=self.head)
        self.vulnerable_component = 'jquery/2.2.0'
        if self.vulnerable_component in self.response.content:
            print "{0} in use is a vulnerable version".format(self.vulnerable_component)
        else:
            print "{0} in use is not vulnerable".format(self.vulnerable_component)

    # Error_Leakage issue seems to be fixed in the weekend so disabling this method by commenting out
    '''
    def error_leakage(self):
        self.url = "https://test.com/qb2/neo/v1/company/1234/purchsales/1?txnTypeId='"
        self.response = requests.request("GET", self.url, data=None, headers=self.head)
        if "com.intuit.qbo" in self.response.content:
            print "Error message disclosing backend package details"
        else:
            print "No package details disclosed in the error message"
    '''

    def csv_injection(self):

        # To create an Employee
        print "Creating an Employee to test for CSV Injection"
        self.first_url = "https://test.com/qb2/neo/v1/company/1234/lists/name/save"
        self.first_data = "{\"id\":null,\"editSequence\":null,\"fullName\":{\"displayName\":\"mr hacker\",\"title\":\"mr\",\"firstName\":\"hacker\",\"lastName\":\"\",\"middleName\":\"\",\"suffix\":\"\",\"checkName\":\"mr hacker\"},\"contactInfo\":{\"email\":\"hacker@test.com\",\"phone\":\"\",\"mobile\":\"\"},\"address\":{\"street\":\"1234\",\"city\":\"\",\"state\":\"\",\"postalCode\":\"\",\"country\":\"\"},\"notes\":\"123456\",\"currency\":null,\"deleted\":false,\"undelete\":false,\"nameProps\":{\"displaySuffixName\":true,\"displayMiddleName\":true,\"displayStateAddress\":true,\"showSSN\":true,\"isAttachmentEnabled\":true,\"hasTimeBilling\":true},\"attachments\":null,\"regionGstIdNumber\":\"\",\"nameTypeId\":2,\"timeBillingRate\":null,\"timeBillable\":false,\"hiringInfo\":{\"ssn\":\"\",\"hireDate\":null,\"releaseDate\":null,\"birthDate\":null,\"gender\":null,\"employeeId\":\"\"}}"
        #print self.first_data
        self.first_response = requests.request("POST", self.first_url, data=self.first_data, headers=self.head)
        print self.first_response.status_code
        self.first_nameId = str(self.first_response.content[self.first_response.content.index('id":')+5:26])
        #print self.first_nameId
        print "created Employee"

        # To create a Time Sheet
        print "Creating Weekly Timesheet to test for CSV Injection"
        self.second_url = "https://test.com/qb2/neo/v1/company/1234/timetracking/save"
        self.second_data = "{\"nameId\":\"%s\",\"weekId\":\"0\",\"rows\":[{\"index\":1,\"customerId\":\"4\",\"itemId\":null,\"rate\":\"\",\"taxable\":false,\"isBillable\":false,\"locationId\":null,\"memo\":\"=cmd|’ /C calc’!D7\",\"klassId\":\"\",\"weekTimes\":[null,null,null,null,null,null,null],\"weekTimeIds\":[null,null,null,null,null,null,null],\"weekTimeSeqs\":[null,null,null,null,null,null,null]}]}" %self.first_nameId
        #print self.second_data
        self.second_response = requests.request("POST", self.second_url, data=self.second_data, headers=self.head)
        #print self.second_response.content
        print "Created Weekly Timesheet"
        if "true" in self.second_response.text:
            print "step 2 in progress"
            self.url = "https://test.com/qb2/neo/v1/company/1234/reports/downloadReport"
            self.data1 = "{\"reportCustomizationAttributes\":{\"token\":\"TIME_ACTIVITIES\",\"show_logo\":\"false\",\"actdate_macro\":\"thismonthtodate\",\"low_actdate\":\"01/12/2017\",\"high_actdate\":\"18/12/2017\",\"groupby\":\"TimeUserName/OrderName\",\"columns\":\"~activity_date_label%3AActivityDate%2C~cs_customer_label%3ACustomerID%2C~memo_desc_label%3AMemoText%2C~rates_label%3ARate%2C*~duration_label%3ADuration%2C~billable_text%3ABillableState%2C-~amount_label%3ATimeTxn%2FAmount%2C\",\"divideby1000\":\"false\",\"hidecents\":\"false\",\"negativenums\":\"1\",\"negativered\":\"false\",\"show_header_title\":\"true\",\"show_header_range\":\"true\",\"show_footer_custom_message\":\"true\",\"show_footer_date\":\"true\",\"show_footer_time\":\"true\",\"header_alignment\":\"Center\",\"footer_alignment\":\"Center\",\"show_header_company\":\"true\",\"company_name\":\"test\",\"title\":\"Time%20Activities%20by%20%20Employee%20Detail\",\"footer_custom_message\":\"\"},\"reportFormat\":\"xlsx\",\"reportTitle\":\"Time%20Activities%20by%20%20Employee%20Detail\",\"companyName\":\"test\"}"
            self.response = requests.request("POST", self.url, data=self.data1, headers=self.head)
            if self.response.status_code == 200:
                print "step 3 in progress"
                token = self.response.content[1:].strip('"')
                #print token
                self.url = "https://test.com/qb2/neo/v1/company/1234/folio/downloadInstant/426287497433511_-371167665_7859926070757339090/Time%20Activities%20by%20%20Employee%20Detail/xlsx"
                url1 = self.url[self.url.index('ant/') + 4:135]
                self.url2 = self.url.replace(url1, token)
                #print self.url2
                self.response = requests.request("GET", self.url2, data=None, headers=self.head)
                #print self.response.text
                if self.response.status_code == 200:
                    print "step 4 in progress"
                    save_file = open('test.xlsx', 'wb')
                    save_file.write(self.response.content)
                    save_file.close()
                    print "file created"
                    if os.path.isfile('test.xlsx'):
                        #print "File exists"
                        workbook = xlrd.open_workbook("test.xlsx")
                        print "Analysing CSV Injection in the downloaded file"
                        worksheet1 = workbook.sheet_by_index(0)
                        total_rows = worksheet1.nrows
                        total_cols = worksheet1.ncols
                        search_value = "=cmd|’ /C calc’!D7"
                        for x in range(total_rows):
                            for y in range(total_cols):
                                if worksheet1.cell(x, y).value == search_value.decode('utf-8'):
                                    print "vulnerable to csv injection"
                                    print worksheet1.cell(x, y)
                                    break
                                else:
                                    continue

        # To Delete the created test Employee
        print "Deleting the created test Employee"
        self.third_url = "https://test.com/qb2/neo/v1/company/123145934782429/lists/name/delete"
        self.third_data = "{\"id\":\"%s\"}" %self.first_nameId
        self.third_response = requests.request("POST", self.third_url, data=self.third_data, headers=self.head)
        print self.third_response.status_code
        print "Deleted the created test Employee"


test = STR()
test.full_test()
